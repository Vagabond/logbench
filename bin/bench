#!/usr/bin/env escript
%% -*- erlang -*-
%% vim: set ft=erlang expandtab shiftwidth=4:

main([Bench, Fmt, Iterations]) ->
    main([Bench, Fmt, Iterations, "1"]);
main([Bench, Fmt, Iterations, Workers]) ->
    setup_paths(),
    code:load_file(logbench),
    code:load_file(logfmt),
    code:load_file(memgraph),
    try {list_to_existing_atom(Bench), list_to_existing_atom(Fmt)} of
        {BenchMark, Format} ->
            case erlang:function_exported(logbench, BenchMark, 1) of
                true ->
                    case erlang:function_exported(logfmt, Format, 0) of
                        true ->
                            run(BenchMark, Format, Iterations, Workers);
                        false ->
                            io:format("unknown format ~p~n", [Format]),
                            usage()
                    end;
                false ->
                    io:format("unknown benchmark ~p~n", [BenchMark]),
                    usage()
            end
    catch
        _:_ ->
            io:format("no error~n"),
            usage()
    end;
main(_) ->
    setup_paths(),
    usage().

run(Bench, Format, Iterations, WC) ->
    try {list_to_integer(Iterations), list_to_integer(WC)}  of
        {Runs, WorkerCount} ->
            {Setup, Fun, Stop} = logbench:Bench(logfmt:Format()),
            ok = filelib:ensure_dir("logs/phony.log"),
            RunsPerWorker = Runs div WorkerCount,
            {_Date, {Hour, Minute, _Second}} = calendar:local_time(),
            memgraph:start(atom_to_list(Bench)++"_"++atom_to_list(Format)),
            Setup(),
            io:format("running ~p ~p with ~p iterations and ~p workers~n", [Bench, Format, Runs, WorkerCount]),
            {Time, _} = timer:tc(fun() ->
                        Workers = [spawn_monitor(fun() -> [Fun() || _ <- lists:seq(1, RunsPerWorker)] end) || _ <- lists:seq(1, WorkerCount)],
                        ok = collect(Workers),
                        Stop()
                end),
            Seconds = Time / 1000000,
            io:format("Result ~p ops/sec ~p~n", [trunc(Runs/Seconds), Seconds]),
            OutFile = lists:flatten(["results/", atom_to_list(Bench), "_", atom_to_list(Format)]),
            ok = filelib:ensure_dir(OutFile),
            ok = file:write_file(OutFile, [integer_to_list(trunc(Runs/Seconds)), $\n], [append]),
            memgraph:graph(integer_to_list(Hour) ++":"++ integer_to_list(Minute), atom_to_list(Bench)++"_"++atom_to_list(Format)),
            halt(0)
    catch
        _:_ ->
            usage()
    end.

collect([]) ->
    ok;
collect(Workers) ->
    receive
        {'DOWN', Ref, _, _, _} ->
            collect(lists:keydelete(Ref, 2, Workers))
    end.

usage() ->
    io:format("Usage: ~s <benchmark> <format> <iterations> [workers]~n", [filename:basename(escript:script_name())]),
    Benchmarks = logbench:module_info(exports) -- [{module_info,0},{module_info,1}],
    io:format("Available benchmarks:~n"),
    [io:format("        ~s~n", [Bench]) || {Bench, _} <- Benchmarks],
    Formats = logfmt:module_info(exports) -- [{module_info,0},{module_info,1}],
    io:format("Available formats:~n"),
    [io:format("        ~s~n", [Format]) || {Format, _} <- Formats],

    halt(1).

setup_paths() ->
    true = code:add_patha(filename:dirname(escript:script_name())
        ++ "/../ebin"),
    true = code:add_patha(filename:dirname(escript:script_name())
        ++ "/../deps/errd/ebin"),
    ok.



